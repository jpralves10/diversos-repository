*************************************** Links ***************************************

https://dev.to/felipedsc/behaviorsubject-para-comunicacao-entre-componentes-3kpj 

https://jasonwatmore.com/post/2019/06/14/angular-8-reactive-forms-validation-example 

https://stackblitz.com/edit/angular-comunicacao-behaviorsubject?file=src%2Fapp%2Fapp.component.html


*************************************** package.json *********************************************************

{
	"name": "projeto-front",
	"version": "0.0.0",
	"license": "MIT",
	".": {
		"ng": "ng",
		"start": "ng serve",
		"build": "ng build --prod",
		"test": "ng test",
		"list": "ng lint",
		"e2e": "ng e2e"
	},
	"scripts": {
		"dev-wiremock": "npm run wiremock && npm run wiremock-proxy && ng serve",
		"test": "npm run wiremock && npm run wiremock-proxy && ng test --code-coverage --sourcemaps=true",
		"wiremock": "cd projeto-front-mock && start wiremock_standalone.sh",
		"wiremock-proxy": "cd projeto-front-mock && cd wiremock-proxy && start wiremock_standalone.sh"
	},
	"private": true,
	"dependencies": {
		"@angular/animations": "5.2.0",
		"@angular/common": "5.2.0",
		"@angular/compiler": "5.2.0",
		"@angular/core": "5.2.0",
		"@angular/forms": "5.2.0",
		"@angular/http": "5.2.0",
		"@angular/platform-browser": "5.2.0",
		"@angular/platform-browser-dynamic": "5.2.0",
		"@angular/router": "5.2.0",
		"@ng-bootstrap/ng-bootstrap": "2.0.0",
		"@ng-select/ng-select": "^1.6.3",
		"angular-notifier": "^3.0.0",
		"core-js": "2.4.1",
		"file-saver": "^2.0.0",
		"jwt-decode": "^2.2.0",
		"net": "^1.0.2",
		"ng-multiselect-dropdown": "0.2.1",
		"ng2-currency-mask": "^5.3.1",
		"ng2-select": "^2.0.0",
		"ng2-table": "1.3.2",
		"ngx-mask": "^8.0.1",
		"ngx-mask-2": "^6.5.23",
		"ngx-spinner": "^2.0.1",
		"rxjs": "5.5.6",
		"sockjs-client": "^1.4.0",
		"stompjs": "^2.3.3",
		"xlsx": "^0.14.1",
		"zone.js": "0.8.19"
	},
	"devDependencies": {
		"@angular/cli": "~1.7.4",
		"@angular/compiler-cli": "^5.2.0", 
		"@angular/language-service": "^5.2.0",
		"@types/jasmine": "~2.8.3",
		"@types/jasminewd2": "~2.0.2",
		"@types/node": "~6.0.60",
		"@typescript-eslint/eslint-plugin": "^2.16.0",
		"@typescript-eslint/parser": "^2.16.0",
		"codelyzer": "^4.0.1",
		"eslint": "^6.8.0",
		"eslint-config-airbnb-base": "^14.0.0",
		"eslint-config-prettier": "^6.9.0",
		"eslint-plugin-import": "^2.20.0"
		"eslint-plugin-prettier": "^3.1.2",
		"jasmine-core": "~2.8.0",
		"jasmine-spec-reporter": "~4.2.1",
		"karma": "~2.0.0",
		"karma-chrome-launcher": "~2.2.0"
		"karma-coverage-istanbul-report": "^1.2.1",
		"karma-jasmine": "~1.1.0",
		"karma-jasmine-html-report": "^0.2.2",
		"ng-bullet": "^1.0.3",
		"prettier": "^1.19.1",
		"protractor": "~5.1.2",
		"ts-node": "~4.1.0",
		"tslint": "~5.9.1",
		"typescript": "^2.8.1"
	}
}

*************************************** tsconfig.json *********************************************************

{
	"compileOnSave": false,
	"compilerOptions": {
		"outDir": "./dist/out-tsc",
		"sourceMap": true,
		"declaration": false,
		"moduleResolution": "node",
		"emitDecoratorMetadata": true, //AQUI
		"experimentalDecorators": true,
		"dowlevelIteration": true,
		"target": "es5",
		"typeRoots": [
			"node_modules/@types"
		],
		"lib": [
			"es2017",
			"dom"
		]
	}
}

*************************************** angular.json *********************************************************

"styles": [
  "src/styles.css",
  "src/assets/css/fonts/font.css",
  "src/assets/css/bootstrap.min.css",
],

*************************************** ViewChild e ViewChildren *********************************************************

export class ActionModalComponent implements OnInit, AfterViewInit {

	@ViewChild(TransactionComponent) transaction: TransactionComponent
	@ViewChild(ComunicationComponent) comunication: ComunicationComponent
	
	@ViewChildren('parametrizationsectio') private parameterGroup: Array<ActionParametrizationModelGroupComponent> = [];
	
	@Output() modalTitle: string
	
	...
}

*************************************** Paginação HTML *********************************************************

constructor(
	private router: Router,
	private route: ActivatedRoute,
	private testData: TestData
){
	/* this.testData.getTestes(10, this.pagina.pagina).subscribe(res => {}) */
	
	this.qtdPaginas = Array(this.testes.qtdPaginas).fill(0).map((x, i) => i = i + 1);
	this.pagina.qtdPaginas = this.qtdPaginas.slice(0, 3)
	this.backupTestesItens = [...this.testes.itens]
}

/* --- Start Pagination --- */
setaPagina(paginaNow: number){
	this.pagina.pagina = paginaNow;
	
	let paginaInicial = this.pagina.pagina - 1
	let paginaFinal = this.pagina.pagina + 2
	
	if(paginaFinal <= this.qtdPaginas.length){
		this.pagina.qtdPaginas = this.qtdPaginas.slice(paginaInicial, paginaFinal)
	}
}

<nav aria-label="...">
	<ul class="pagination d-flex justify-content-center table-class-pagination">
		<li [className]="pagina.pagina == 1 ? 'page-item disabled' : 'page-item'">
			<a class="page-link" tabindex="-1" (click)="setaPagina(pagina.pagina-1)">Anterior</a>
		</li>

		<li 
			*ngFor="let paginaNow of pagina.qtdPaginas" 
			[className]="paginaNow == pagina.pagina ? 'page-item active' : 'page-item'">
			<a class="page-link" (click)="setaPagina(paginaNow)">{{paginaNow}}</a>
		</li>

		<!--li class="page-item active">
			<a class="page-link" href="#">1</a>
		</li>
		<li class="page-item active">
			<a class="page-link" href="#">2</a>
		</li>
		<li class="page-item">
			<a class="page-link" href="#">3</a>
		</li-->

		<li [className]="pagina.pagina == qtdPaginas.length ? 'page-item disabled' : 'page-item'">
			<a class="page-link" (click)="setaPagina(pagina.pagina+1)">Próximo</a>
		</li>
	</ul>
</nav>



*************************************** Modal *********************************************************

constructor(
	private modalService: NgbModal
){}
				
private confirmValidateToShowDialog(guaranteeid: number){

	const confirmationModalTitle = 'Deseja prosseguir com a operação';
	const confirmationModalMessage = 'Os dados não salvos serão perdidos.';
	
	const confirmeModalComponent: NgModalRef = this.modalService.open(ConfirmedModalComponent, {
		centered: true,
		windowClass: this.modalWindowClass,
		backdrop: 'static'
	});
	
	const modalComponentInstance: ConfirmedModalComponent = 
		confirmedModalComponent.componentInstance;
	modalComponentInstance.modalTitle = confirmationModalTitle;
	modalComponentInstance.modalConfirmationMessage = confirmationModalMessage;
	
	confirmationModalComponent.result.then(
		() =>{
			this.cleanGuarantee();
			this.disableToShowRule(guaranteeId);
		},
		() =>{}
	);
}				
				
				
*************************************** Table *********************************************************		

Grid Config Model:

export interface GridConfig {

    /**
     * Configuração do ng-table se a tabela será paginada ou não
     */
    paging: boolean;

    /**
     * Flag que indica se o componente de paginação deve estar visível ou não
     */
    showPagination: boolean;

    /**
     * Objeto com as configurações de Ordenação
     */
    sorting: any;

    /**
     * Objeto com as configurações de filtro
     */
    filtering: any;

    /**
     * Classes CSS da tabela
     */
    className: Array<string>;
}

Esterira Operacional Grid Item:

export interface EsteiraOperacionalGridItem {
	id: number;
	nomeEsteira: string;
	statusEsteira: string;
	iconConsultar: string;
	iconCancelar: string;
}

Component TS:

	@Input() @Output() messageBodyResult: string;
	@Input() @Output() itemsPerPage: number;
	@Input() @Output() maxSize: number;
	@Input() tableId: string;
	@Input() paginationId: string;
	@Input() gridData: Array<EsteiraOperacionalGridItem>;
	@Input() checklistPage: Array<EsteiraOperacionalGridItem> = new Array<EsteiraOperacionalGridItem>();
	@Output() esteiraEmitter = new EventEmitter();
	@Output() config: GridConfig;
	@Output() readonly columns: Array<GridColumnSearchEventModel>;

	constructor(){
		this.rows = [];
		this.page = 1;
		this.length = 0;
		this.maxSize = 8;
		this.itemsPerPage = 10;
		this.descendantTableSort = "desc";
		this.ascendantTableSort = "asc";
		this.listColumnHeaderClass = 'listing-column-header';
		this.defaultColumnClasses = [this.listColumnHeaderClass, 'exj-text-bold', 'font-size-16'];
		this.iconSortingUpClass = 'icon-sorting-up';
		this.iconSortingDownClass = 'icon-sorting-down';
		this.isShowPaginationTableFiltered = true;
		
		this.columns = [
			{
				title: 'Nome da Esteira',
				name: 'nomeEsteira',
				className: this.defaultColumnClasses.concat('th-width-300');
				sort: true
			},
			{
				title: 'Status',
				name: 'statusEsteira',
				className: this.defaultColumnClasses.concat('th-width-120 align-center');
				sort: true
			},
			{
				title: 'Consultar',
				name: 'iconConsultar',
				className: this.defaultColumnClasses.concat('th-width-110 align-center');
				sort: true
			},
			{
				title: 'Cancelar',
				name: 'iconCancelar',
				className: this.defaultColumnClasses.concat('th-width-110 align-center');
				sort: true
			},
		];
		
		this.config: GridConfig = {
			paging: true,
			showPagination: true,
			sorting: {columns: this.columns},
			filtering: {filterString: ''},
			className: ['table-striped', 'table-bordered']
		};
	}
	
	ngOnInit(){
		if(this.gridData != null){
			this.length = this.gridData.length
		}
		this.isTableDataEmpty = !(this.gridData && this.gridData.length);
		this.onChangeTable(this.config);
	}
	
	ngOnChanges(): void {
		this.hasMessageToBody = this.messageBodyResult != null;
		if(this.gridData){
			this.length = this.gridData.length;
			this.onChangeTable(this.config);
		}
		this.isTableDataEmpty = !(this.gridData && this.gridData.length);
		
		if(this.gridData.length != 0){
			this.length = this.gridData.length
		}
		this.config.showPagination = (this.gridData.length > this.itemsPerPage);
	}
	
	public onChangeTable(config: any): void {
		var table = document.getElementById(this.tableId);
		var headersTable = {} as NodeListOf<Element>;
		let spanElementSelector = 'span';
		
		if(table){
			headersTable = table.getElementByClassName(this.listColumnHeaderClass);
		}
		
		for(let x=0; x < headersTable.length; x++){
			while(headersTable[x].getElementsByTagName(spanElementSelector).length > 0){
				headersTable[x].getElementsByTagName(spanElementSelector)[0].parentNode.removeChild(headersTable[x].getElementsByTagName('span')[0]);
			}
		}
		
		var page: any = { page: this.page, itemsPerPage: this.itemsPerPage };
		
		if(config.sorting){
			Object.assign(this.config.sorting, config.sorting);
		}
		
		let sortedData = this.changeSort(this.gridData, this.config);
		this.rows = page && config.paging ? this.changePage(page, sortedData): sortedData;
		this.length = sortedData.length;
		
		for(let x=0; x < headersTable.length; x++){
			for(var column of this.config.sorting.columns){
				var headerText = headersTable[x].innerHTML;
				if(headerText.includes(column.title) && (column.sort === true || column.sort === '')){
					var iconUp = document.createElement(spanElementSelector);
					iconUp.className = this.iconSortingUpClass;
					headersTable[x].appendChild(iconUp);
					
					var iconDown = document.createElement(spanElementSelector);
					iconDown.className = this.iconSortingDownClass;
					headersTable[x].appendChild(iconDown);
				}
			}
		}
	}
	
	public changeSort(data: any, config: any): any {
		if(!config.sorting){
			return data;
		}
		
		let columns = this.config.sorting.columns || [];
		let columnName: string = void 0;
		let sort: string = void 0;
		
		for(let i=0; i < columns.length; i++){
			if(columns[i].sort !== '' && columns[i].sort !== false){
				columnName = columns[i].name;
				sort = columns[i].sort;
			}
		}
		
		if(!columnName){
			return data;
		}
		
		//simple sorting
		return data.sort((previous: any, current: any) => {
			if(previous[columnName] != null){
				if(this.stringUtilsService.removeAccents(previous[columnName]).toLowerCase() >
					this.stringUtilsService.removeAccents(current[columnName]).toLowerCase()){
					return sort === this.descendantTableSort ? -1 : 1;
				} else if(this.stringUtilsService.removeAccents(previous[columnName]).toLowerCase() <
					this.stringUtilsService.removeAccents(current[columnName]).toLowerCase()){
					return sort === this.ascendantTableSort ? -1 : 1;
				}
			}
			return 0;
		});
	}
	
	public changePage(page: any, data: Array<EsteiraOperacionalGridItem>): Array<any>{
		const start = (page.page - 1) * page.itemsPerPage;
		const end = page.itemsPerPage > -1 ? (start + page.itemsPerPage) : data.length;
		const newArray = data.slice(start, end);
		if(newArray.length !== 0){
			return newArray;
		}
	}
	
Component HTML:

<div [id]="tableId">
	<ng-table
		[rows]="rows"
		[columns]="columns"
		[config]="config"
		(tableChanged)="onChangeTable(config)"
		(cellClicked)="onCellClick($event)" >
	</ng-table>
	<app-message-body-grid
		*ngIf="hasMessageToBody"
		[messageBody]="messageBodyResult" >
	</app-message-body-grid>
	<ngb-pagination
		[id]="paginationId"
		class="ngb-pagination"
		[(page)]="page"
		*ngIf="mostrarPaginacao()"
		[collectionSize]="length"
		[pageSize]="itemsPerPage"
		[maxSize]="maxSize"
		[boundaryLinks]="false"
		[rotate]=false
		(pageChange)="onChangeTable(config, $event)"
		(numPages)="numPages = $event"
		arial-label="Default pagination >
	</ngb-pagination>
</div>

*************************************** Ng Multiselect Dropdown / FormGroup *********************************************************

Component:

public contratoSelecionado: any;
public contractComboList: Array<OperationalContactUpdate> = [];
public dropdownSettingsContrato = {};

public genericFormGroup: FormGroup;


private configuracaoDropDownContratos(): void {
	this.dropdownSettingsContrato = {
		singleSelection: true,
		idField: 'id',
		textField: 'codSigla',
		itemsShowLimit: this.contractComboList.length,
		allowSearchFilter: true,
		noDataAvailablePlaceholderText: 'Nenhum registro encontrado',
		searchPlaceholderText: 'Filtrar'
	}
}


HTML:

<form class="needs-validation" [formGroup]="genericFormGroup">
	<div class="row">
		<div class="col-sm-4">
			<div class="form-group">
				<label class="text-regular color-text-gray">Id/Sigla: *</label>
				<ng-multiselect-dropdown
					formControlName='sigla'
					id="inputContrato"
					[(ngModel)]="contratoSelecionado"
					class="inputIdSigla font-size-12"
					[placeholder]="'Selecione'"
					[data]="contractComboList"
					[settings]="dropdownSettingsContrato"
					(onSelect)="alteraContas(this.genericFormGroup.controls['sigla'].value)"
					(onDeSelect)="resetDropDownWhenRemove()"
					[disabled]="genericFormGroup.controls['sigla'].disabled" >
				</ng-multiselect-dropdown>
				<div class="invalid-feedback" *ngIf="genericFormGroup.get('sigla').invalid">
					Sigla inválida.
				</div>
			</div>
		</div>
		<div class="col-sm-4">
			<div class="form-group">
				<label class="text-regular color-text-gray">Status: *</label>
				<select class="custom-select font-size-14 input-border col-12" id="dropDownStatusContrato"
					formControlName="status" #selectContractStatus >
					<option value="" selected>Selecione</option>
					<option *ngFor="let situacao of situacaoList" [value]="situacao.id">
						{{situacao.nome}}
					</option>
			</div>
		</div>
	</div>
</form>


*************************************** Spinner *********************************************************		

Component:

constructor(
	private spinner: NgxSpinnerService
){}

ngOnInit(){
	this.configurarTipoSpinner();
	this.spinner.show();
	this.spinner.hide();
}

private configurarTipoSpinner(){
	const randomNumber = Math.floor(Math.random() * 9) + 1;
	
	this.listaTipoSpinner = [
		'pacman',
		'square-jelly-box',
		'timer',
		'pacman',
		'line-scale-pulse-out-rapid',
		'fire',
		'cube-transition',
		'triangle-skew-spin',
		'ball-spin',
		'ball-8bits',
		'ball-zig-zag-deflect'
	];
	
	this.nomeTipoSpinner = this.listaTipoSpinner[randomNumber];
}
	
HTML:

<ngx-spinner bdColor="rgba(51,51,51,0.8)" size="medium" color="#fff" [type]="nomeTipoSpinner">
	<p style="font-size: 20px; color: white">Loading...</p>
</ngx-spinner>

*************************************** Notifier Toasty *********************************************************		

constructor(
	private notifierService: NotifierService
){
	this.notifier = notifierService;
}

public showToastySuccess(): void {
	this.notifier.notify('toasty-success', 'Operação realizada com sucesso!')
}

public showToastyError(): void {
	this.notifier.notify('toasty-error', 'Erro na operação. \n Por favor, tente novamente!')
}
	
*************************************** Download File *********************************************************		

public downloadRelatorioContratos(): void {
	this.spinner.show();
	this.relatorioAdminService
		.getRelatorioContatos()
		.pipe(finalize(() => this.spinner.hide()))
		.subscribe(
			res => {
				const blob = new Blob([res], {type: 'application/vnd.ms-excel'});
				const file = new File([blob], this.nomeArquivo + '.xlsx', {type: 'application/vnd.ms-excel'});
				FileSaver.saveAs(file);
			},
			err => {
				this.verifyMessageErrorByStatusCode(err, 'Erro ao gerar Relatório')
			}
		);
}

*************************************** ForkJoin *********************************************************		

private retrieveCompositionRule(guaranteeId: number){
	const compositionService = this.guaranteeRuleService.getRuleComposition(
		this.contrato.idContrato,
		guaranteeId
	);
	
	const actionDomainObservable: Observable<Array<GuaranteeRulesAction>> =
		this.retrieveActionDomainParameterization();
		
	const ruleModalItem = this.getNewRuleModalItems();
	
	forkJoin([compositionService, actionDomainObservable, ruleModalItem]).subscribe(
		result => {
			this.ruleCompositionView = this.transformaCascataEmAcao(results[0].result);
			this.domainActions = results[1];
			this.modalItems = results[2];
			this.preencheAbaProdutos();
			this.fillPeriodicity();
		},
		err => {
			if(err.status === HttpStatus.zero || HttpStatus.isError(err.status)){
				this.showToastyError();
			}
		}
	);
}

*************************************** Promise All *********************************************************		

ngOnInit(){
	this.spinner.show();
	Promise.all([this.populaSiglaId(), this.populaComboEventos()]).then(() => {
		this.verificaConsulta();
	})
	.then(() => {
		this.spinner.hide();
	})
	.catch(() => {
		this.spinner.hide();
	})
}

private populaSiglaId(): Promise<any> {
	return this.contractGuaranteeService
		.getAllContractGuarantee(null, null)
		.toPromise()
		.then(
			res => {
				if(res){
					const lista = [...res.result];
					this.contractComboList = lista.filter(
						item => item.contractStatus.status === 'Aprovado'
					);
				}
			},
			() => this.exibirToastyErro('Ocorreu um erro ao carregar os dados')
		);
}


*************************************** Navegação *********************************************************

Routing.Module:

const routes: Routes = [
	{
		path: 'atendimento',
		component: AtendimentoComponent
	},
	{
		path: 'consulta-atendimento/:id/:status',
		component: FormAtendimentoComponent
	},
    {
        path: '',
        data: {
            breadcrumb: {visible:false}
        },
        component: PrincipalComponent,
        children: [
            /*{
                path: 'cursos',
                //loadChildren: () => import('./cursos/cursos.module').then(m => m.CursosModule),
                //canActivateChild: [AuthGuardService],
                data: {
                    breadcrumb: {
                        visible: true,
                        label: 'Cursos'
                    }
                }
            },*/
            {
                path: 'painelcontrole',
                loadChildren: () => import('./painelcontrole/painelcontrole.module').then(m => m.PainelControleModule),
                //canActivateChild: [AuthGuardService],
                data: {
                    breadcrumb: {
                        visible: true,
                        label: 'Painel de Controle'
                    }
                }
            }
        ]
    }
];

Component:

constructor(
	private route: ActivatedRoute,
	private router: Router
){}

this.router.navigate(['./atendimento'])

this.router.navigate([`/atendimento/consulta-atendimento/${event.idAtendimento}/${event.statusValor}`])

this.router.navigate([`/catalogo/catalogo-edit`], {
	relativeTo: this.route,
	replaceUrl: false,
	queryParams: {
		filterCatalogo: JSON.stringify({...produto})
	}
});

constructor(
	private router: Router,
	private route: ActivatedRoute
) {
	this.route.queryParamMap.subscribe(paramMap => {
		this.produto = JSON.parse(paramMap.get('filterCatalogo'));
	})
}


*************************************** ChatService *********************************************************

import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ChatHistory, ChatAuthentication } from '../data/chat';
import { ChatService } from '../http/chat.service';
import { scheduleJob } from 'node-schedule';

@Injectable({
    providedIn: 'root'
})
export class UpdateChatService {

  private chatHistorySource: BehaviorSubject<ChatHistory> = new BehaviorSubject(this.getChatHistory());
  public chatHistory: Observable<ChatHistory> = this.chatHistorySource.asObservable();

  constructor(
    private chatService: ChatService
  ){
    localStorage.setItem('chatHistory', JSON.stringify(''));
  }

  chatAuthentication(nome: string, email: string){
    return new Promise((resolve, reject) => {

        this.chatService.getChatAutentica(nome, email).subscribe(res => {

          this.saveChatAuthentication(res)

          this.getChatReceive(res.atendimento_sessao_id, 10, true)

          resolve(true);

        }, err => {
          reject(err);
        });
    });
  }

  getChatReceive(id: number, limit: number, hitory: boolean, last?: number): Promise<any> {
    return new Promise((resolve, reject) => {

      this.chatService.getChatReceive(id, limit, hitory, last).subscribe(chatHistory => {

        chatHistory.models.forEach(model => {
          model.person = model.sender_id == this.getChatAuthentication().atendimento_sessao_id ? 'message me' : 'message other'
        })

        this.saveChatHistory(chatHistory);
        
        //this.alertService.set({type: 'success', message: `Seja bem vindo, ${res.data.name}!`});

        resolve(true);

      }, err => {
        reject(err);
      });
    });
  }

  setChatReceive(message: string, idLastMessage: number){
    this.chatService.setChatSend(this.getChatAuthentication().atendimento_sessao_id, message).subscribe(returnSend => {

      if(returnSend.statusCode === 201){
        this.getChatReceive(this.getChatAuthentication().atendimento_sessao_id, 1, false, idLastMessage)
      }
    })
  }

  saveChatAuthentication(chatAuthentication: ChatAuthentication) {
    localStorage.setItem('chatAuthentication', JSON.stringify(chatAuthentication));
  }

  getChatAuthentication(): ChatAuthentication {
    return JSON.parse(localStorage.getItem('chatAuthentication'));
  }

  saveChatHistory(chatHistory: ChatHistory) {
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));

    this.chatHistorySource.next(chatHistory);
  }

  getChatHistory(): ChatHistory {
    return JSON.parse(localStorage.getItem('chatHistory'));
  }
}

*************************************** ChatComponent *********************************************************

import { Component, OnInit } from '@angular/core';
import { UpdateChatService } from 'src/app/core/services/chat.service';
import { Message, ChatHistory } from 'src/app/core/data/chat';
import { scheduleJob, cancelJob, Job } from 'node-schedule';
import $ from "jquery";

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.scss']
})
export class ChatComponent implements OnInit {

  public isOpen = false;
  public counter = 10;
  public textMessage = '';
  public message: Message = {}
  public messages = [];
  public flForm = false;

  public chatSchedule: Job

  constructor(
    private chatService: UpdateChatService
  ) {}

  ngOnInit() {
    this.chatService.chatHistory.subscribe(chatHistory => this.messageChatHistory(chatHistory));
  }

  messageChatHistory(chatHistory: ChatHistory){
    if(this.messages.length == 0){
      this.setMessage();
    }else{
      chatHistory.models.sort((a, b) => Number(a.id) - Number(b.id));
      this.messages.push(...chatHistory.models)
      this.updateScroll()

      //console.log("##", this.messages[this.messages.length - 1].id)

      cancelJob(this.chatSchedule)
      this.scheduleJobChat()
    }
  }

  scheduleJobChat(){
    this.chatSchedule = scheduleJob('*/5 * * * * *', function(chat, idLast){
      //console.log("@@", idLast)
      chat.chatService.getChatReceive(chat.chatService.getChatAuthentication().atendimento_sessao_id, 10, false, idLast)
    }.bind(null, this, this.messages[this.messages.length - 1].id));
  }

  setMessage(){
    if(this.messages.length == 0){
      this.flForm = true;
      this.messages.push(this.generateMessage("Digite o seu nome:", "message other"))
    }
  }

  updateScroll(){
    setTimeout(function(){
      var div = $("#messageid");
      var h = div.get(0).scrollHeight;
      div.animate({scrollTop: h}, 800);
    }, 100);
  }

  sendMessage(){
    if(this.flForm){
      this.chatAuthentication();
    }else{
      this.chatService.setChatReceive(this.textMessage, this.messages[0].id);
    }
    this.updateScroll()
    this.textMessage = '';
  }

  chatAuthentication(){
    if(this.messages.length == 3){      
      this.messages.push(this.generateMessage(this.textMessage, "message me"))

      this.chatService.chatAuthentication(this.messages[1].text,  this.messages[3].text).then(ret => {
        this.flForm = false
      });
    }

    if(this.messages.length == 1){
      this.messages.push(this.generateMessage(this.textMessage, "message me"))
    }

    if(this.messages.length == 2){
      this.messages.push(this.generateMessage("Digite o seu email:", "message other"))
    }
  }

  generateMessage(textMessage: string, person: string){
    let message: Message = {}
    message.text = textMessage.trim()
    message.created_at = new Date().getTime()
    message.person = person
    return message;
  }

  formatCreatedAt(dateTime: number){
    let created_at = new Date(dateTime)
    return created_at.toLocaleDateString('pt-BR') + ' ' + created_at.toLocaleTimeString('pt-BR')
  }
}